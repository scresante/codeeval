from itertools import combinations
from sys import argv
from math import sqrt,ceil
try:
    f = argv[1]
except:
    f = 'tests/164'
data = open(f,'r').read().splitlines()

def getweight(vj, vk): #vj and vk are two coords each x,y
  return sqrt( (abs(vj[0]-vk[0]))**2 + (abs(vj[1]-vk[1]))**2 )

parent = dict()
rank = dict()

def make_set(vertice):
    parent[vertice] = vertice
    rank[vertice] = 0

def find(vertice):
    if parent[vertice] != vertice:
        parent[vertice] = find(parent[vertice])
    return parent[vertice]

def union(vertice1, vertice2):
    root1 = find(vertice1)
    root2 = find(vertice2)
    if rank[root1] > rank[root2]:
        parent[root2] = root1
    else:
        parent[root1] = root2
        if rank[root1] == rank[root2]:
          rank[root2] += 1

def kruskal(graph):
    for vertice in graph['vertices']:
        make_set(vertice)

#    print graph
    minimum_spanning_tree = set()
    edges = list(graph['edges'])
    edges.sort()
    for edge in edges:
        weight, vertice1, vertice2 = edge
        if find(vertice1) != find(vertice2):
            union(vertice1, vertice2)
            minimum_spanning_tree.add(edge)
    return minimum_spanning_tree

for line in data:
    if not line:
        continue
    nodes=dict()
    rawcoords = line.split(' ')
    coords = [ (int(x),int(y)) for x,y in [ r.split(',') for r in rawcoords] ]
    for n in range(len(coords)):
      nodes[n] = coords[n]
    nodepairs = [c for c in combinations(range(len(coords)), 2)]
    Edges = []
    for x,y in nodepairs:
      Edges.append( ((getweight(nodes[x],nodes[y]), x, y)) )
    graph = {
        'vertices': range(len(coords)),
        'edges': set(Edges)
        }

    print int(ceil(sum(d[0] for d in list(kruskal(graph)))))

